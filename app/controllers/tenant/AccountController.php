<?php
namespace Controllers\Tenant;

use View, Notification, Redirect, Input, Session, Lang, Mail;

use Models\Account;
use Slap\Exceptions\ValidationException;
use Slap\Exceptions\AuthException;

class AccountController extends \Controllers\BaseController
{
    /**
     * Model
     * @var Account
     */
    protected $model;

    /**
     * Create a new controller instance and inject model
     * @param Models\Account $model
     * @return void
     */
    public function __construct(Account $model)
    {
        $this->model = $model;
    }

    /**
     * Get the login view
     * @return View
     */
    public function getLogin()
    {
        return View::make('tenant.login');
    }

    /**
     * Log the user in
     * @return Redirect
     */
    public function postLogin()
    {
        try
        {
            $user = $this->model->login(Input::get('email'), Input::get('password'));
        }
        catch(ValidationException $e)
        {
            Notification::error($e->errors());

            return Redirect::back()->withInput();
        }
        catch(AuthException $e)
        {
            Notification::error(Lang::get($e->getMessage()));

            return Redirect::back()->withInput();
        }

         return $this->redirectByRole($user);
    }

     /**
     * Get the forgot password view. If the request has been redirected here
     * from a post then notify and redirect. We notify on success or error for security.
     * @return Redirect | View
     */
    public function getForgot()
    {
        if (Session::has('success') or Session::has('error'))
        {
            Notification::info(Lang::get('account.reminders.sent'));

            return Redirect::to('account/login')->withInput();
        }

        return View::make('tenant.forgot');
    }

    /**
     * Send password reminder.
     * @return Redirect
     */
    public function postForgot()
    {
        try
        {
            $response = $this->model->forgot(Input::get('email'));
        }
        catch(ValidationException $e)
        {
            Notification::error($e->errors());

            return Redirect::back()->withInput();
        }

        return $response;
    }

    /**
     * Get Reset Password view
     * @param  string $token Token from email generated by forgot password post
     * @return View
     */
    public function getReset($token = null)
    {
        if( Session::has('error') )
        {
            Notification::errorInstant(Lang::get('account.'.Session::get('reason')));
        }

        return View::make('tenant.reset')->with('token', $token);
    }

    /**
     * Reset user's password, log them in and redirect to appropriate app
     * @return Redirect
     */
    public function postReset()
    {
        try
        {
            $user = $this->model->reset(Input::get('email'));
        }
        catch(ValidationException $e)
        {
            Notification::error($e->errors());

            return Redirect::back()->withInput();
        }
        catch(AuthException $e)
        {
             return $user;
        }

        return $this->redirectByRole($user);
    }

    /**
     * Get the sign up view
     * @return View
     */
    public function getSignup()
    {
        return View::make('tenant.signup');
    }

    /**
     * Create the new user and log them in
     * @return Redirect
     */
    public function postSignup()
    {
        try
        {
           $user = $this->model->signup(Input::all());
        }
        catch(ValidationException $e)
        {
            Notification::error($e->errors());

            return Redirect::back()->withInput();
        }
        catch(AuthException $e)
        {
            Notification::error(Lang::get($e->getMessage()));

            return Redirect::back()->withInput();
        }

        return $this->redirectByRole($user);


    }

    /**
     * Log the user out and return the logout view.
     * @return View
     */
    public function getLogout()
    {
        $this->model->logout();

        return View::make('tenant.logout');
    }

    /**
     * Redirect based on users role
     * @param  Models\User $user
     * @return Redirect
     */
    private function redirectByRole($user)
    {
        if ($user->hasRole('admin'))
        {
            die('redirect to admin');
            return Redirect::intended('admin');
        }
        die('redirect to member');
        return Redirect::intended('member');
    }

}
