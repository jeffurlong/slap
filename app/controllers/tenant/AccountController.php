<?php
namespace tenant;

use \Slap\Storage\User\UserRepositoryInterface as User;
use \Slap\Storage\Person\PersonRepositoryInterface as Person;

class AccountController extends \BaseController
{
    /**
     * User
     * @var UserRepositoryInterface
     */
    protected $user;

    /**
     * Person
     * @var PersonRepositoryInterface
     */
    protected $person;

    /**
     * Create a new controller instance and injects the repository interface
     * @param UserRepositoryInterface $users
     * @return UserRepositoryInterface
     */
    public function __construct(User $user, Person $person)
    {
        $this->user = $user;

        $this->person = $person;
    }

    /**
     * Get the login view
     * @return View
     */
    public function getLogin()
    {
        return \View::make('tenant.login');
    }

    /**
     * Validate login credentials. Success redirects based on user role.
     * @return Redirect
     */
    public function postLogin()
    {
        $v = new \Slap\Services\Validation\User;
        if($v->passes())
        {
            dd('passed');
        }
        else
        {
            \Notification::container()->error($v->getErrors()->toArray());

            // dd($v->getErrors());

            // foreach($v->getErrors() as $label => $errors)
            // {
            //     $errors 
            //    \Notification::error($errors[0]); 
            // }
            
            return \Redirect::back()->withInput();
        }
        if ( ! \Auth::attempt(array( 
            'email' => Input::get('email'),
            'password' => Input::get('password')
        )))
        {
            \Notification::error(Lang::get('account.invalid'));

            return \Redirect::back()->withInput();
        }

        return $this->redirectByRole(\Auth::user());
    }

    /**
     * Get the sign up view
     * @return View
     */
    public function getSignup()
    {
        return \View::make('tenant.signup');
    }

    /**
     * Create the new user and log them in
     * @return Redirect
     */
    public function postSignup()
    {
        try {
            $person = $this->person->create(\Input::all());

            $user = $this->user->create(\Input::all());
        }
        catch(\Exception $e)
        {
            if (isset($person))
            {
                $person->forceDelete();
            }

            if (isset($user))
            {
                $user->forceDelete();
            }

            throw $e;
        }

        \Auth::login($user);

        return \Redirect::to('member');
    }

    /**
     * Log the user out and return the logout view.
     * @return View
     */
    public function getLogout()
    {
        \Auth::logout();

        return \View::make('tenant.logout');
    }

    /**
     * Get the forgot password view. If the request has been redirected here 
     * from a post, notify. We notify on success or error for security.
     * @return Redirect | View
     */
    public function getForgot()
    {
        if (\Session::has('success') or \Session::has('error'))
        {
            \Notification::info(\Lang::get('reminders.sent'));

            return \Redirect::to('account/login')->withInput();
        }

        return \View::make('tenant.forgot');
    }

    /**
     * Send password reminder. Password:remind redirects back to forgot view.
     * @return Redirect
     */
    public function postForgot()
    {
        return \Password::remind(

            array('email' => \Input::get('email')),
            
            function ($message, $user)
            {
                $message->subject('Password reminder');
            }
        );
    }

    /**
     * Get Reset Password view
     * @param  string $token Token from email generated by forgot password post
     * @return View
     */
    public function getReset($token = null)
    {
        if( \Session::has('error') )
        {
            \Notification::errorInstant(\Lang::get('account.'.\Session::get('reason')));
        }

        return \View::make('tenant.reset')->with('token', $token);
    }

    /**
     * Reset user's password and log them in to appropriate app
     * @param  string $token
     * @return Redirect
     */
    public function postReset()
    {
        $data = array(
            'email'                 => \Input::get('email'),
            'password'              => \Input::get('password'),
            'password_confirmation' => \Input::get('password_confirmation')
        );

        return \Password::reset($data, function($user, $password)
        {
            $user->password = \Hash::make($password);

            $user->save();

            \Auth::login($user);

            return $this->redirectByRole(\Auth::user());
        });
    }

    private function redirectByRole($user)
    {
        if ($user->hasRole('admin'))
        {
            die('redirect to admin');
            return \Redirect::intended('admin');
        }
        die('redirect to member');
        return \Redirect::intended('member');
    }
}
